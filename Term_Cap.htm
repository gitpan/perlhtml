<HEAD><CENTER><TITLE>Term_Cap</TITLE>
</CENTER></HEAD>
<BODY><p><hr>

<H1> 
<A NAME="Term::Cap_name_0">
NAME</A>
</H1>
Term::Cap - Perl termcap interface
<p><p><hr>

<H1> 
<A NAME="Term::Cap_synopsis_0">
SYNOPSIS</A>
</H1>

<XMP>
    require Term::Cap;
    $terminal = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };
    $terminal->Trequire(qw/ce ku kd/);
    $terminal->Tgoto('cm', $col, $row, $FH);
    $terminal->Tputs('dl', $count, $FH);
    $terminal->Tpad($string, $count, $FH);

</XMP>
<p><p><hr>

<H1> 
<A NAME="Term::Cap_description_0">
DESCRIPTION</A>
</H1>
These are low-level functions to extract and use capabilities from
a terminal capability (termcap) database.
<p>The <STRONG>Tgetent</STRONG> function extracts the entry of the specified terminal
type <EM>TERM</EM> (defaults to the environment variable <EM>TERM</EM>) from the
database.
<p>It will look in the environment for a <EM>TERMCAP</EM> variable.  If
found, and the value does not begin with a slash, and the terminal
type name is the same as the environment string <EM>TERM</EM>, the
<EM>TERMCAP</EM> string is used instead of reading a termcap file.  If
it does begin with a slash, the string is used as a path name of
the termcap file to search.  If <EM>TERMCAP</EM> does not begin with a
slash and name is different from <EM>TERM</EM>, <STRONG>Tgetent</STRONG> searches the
files <EM><STRONG>$HOME</STRONG>/.termcap</EM>, <EM>/etc/termcap</EM>, and <EM>/usr/share/misc/termcap</EM>,
in that order, unless the environment variable <EM>TERMPATH</EM> exists,
in which case it specifies a list of file pathnames (separated by
spaces or colons) to be searched <STRONG>instead</STRONG>.  Whenever multiple
files are searched and a tc field occurs in the requested entry,
the entry it names must be found in the same file or one of the
succeeding files.  If there is a <CODE>:tc=...:</CODE> in the <EM>TERMCAP</EM>
environment variable string it will continue the search in the
files as above.
<p><EM>OSPEED</EM> is the terminal output bit rate (often mistakenly called
the baud rate).  <EM>OSPEED</EM> can be specified as either a POSIX
termios/SYSV termio speeds (where 9600 equals 9600) or an old
BSD-style speeds (where 13 equals 9600).
<p><STRONG>Tgetent</STRONG> returns a blessed object reference which the user can
then use to send the control strings to the terminal using <STRONG>Tputs</STRONG>
and <STRONG>Tgoto</STRONG>.  It calls <CODE>croak</CODE> on failure.
<p><STRONG>Tgoto</STRONG> decodes a cursor addressing string with the given parameters.
<p>The output strings for <STRONG>Tputs</STRONG> are cached for counts of 1 for performance.
<STRONG>Tgoto</STRONG> and <STRONG>Tpad</STRONG> do not cache.  <CODE><STRONG>$self</STRONG>-&gt;{_xx}</CODE> is the raw termcap
data and <CODE><STRONG>$self</STRONG>-&gt;{xx}</CODE> is the cached version.
<p>
<XMP>
    print $terminal->Tpad($self->{_xx}, 1);

</XMP>
<p><STRONG>Tgoto</STRONG>, <STRONG>Tputs</STRONG>, and <STRONG>Tpad</STRONG> return the string and will also
output the string to <STRONG>$FH</STRONG> if specified.
<p>The extracted termcap entry is available in the object
as <CODE><STRONG>$self</STRONG>-&gt;{TERMCAP}</CODE>.
<p><p><hr>

<H1> 
<A NAME="Term::Cap_examples_0">
EXAMPLES</A>
</H1>

<XMP>
    # Get terminal output speed
    require POSIX;
    my $termios = new POSIX::Termios;
    $termios->getattr;
    my $ospeed = $termios->getospeed;
    # Old-style ioctl code to get ospeed:
    #     require 'ioctl.pl';
    #     ioctl(TTY,$TIOCGETP,$sgtty);
    #     ($ispeed,$ospeed) = unpack('cc',$sgtty);
    # allocate and initialize a terminal structure
    $terminal = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };
    # require certain capabilities to be available
    $terminal->Trequire(qw/ce ku kd/);
    # Output Routines, if $FH is undefined these just return the string
    # Tgoto does the % expansion stuff with the given args
    $terminal->Tgoto('cm', $col, $row, $FH);
    # Tputs doesn't do any % expansion.
    $terminal->Tputs('dl', $count = 1, $FH);

</XMP>
<p>
</BODY>
</HTML>
