<HEAD><CENTER><TITLE>IPC_Open2</TITLE>
</CENTER></HEAD>
<BODY><p><hr>

<H1> 
<A NAME="IPC::Open2_name_0">
NAME</A>
</H1>
IPC::Open2, open2 - open a process for both reading and writing
<p><p><hr>

<H1> 
<A NAME="IPC::Open2_synopsis_0">
SYNOPSIS</A>
</H1>

<XMP>
    use IPC::Open2;
    $pid = open2(\*RDR, \*WTR, 'some cmd and args');
      # or
    $pid = open2(\*RDR, \*WTR, 'some', 'cmd', 'and', 'args');

</XMP>
<p><p><hr>

<H1> 
<A NAME="IPC::Open2_description_0">
DESCRIPTION</A>
</H1>
The <EM>open2()</EM> function spawns the given <STRONG>$cmd</STRONG> and connects <STRONG>$rdr</STRONG> for
reading and <STRONG>$wtr</STRONG> for writing.  It's what you think should work 
when you try
<p>
<XMP>
    open(HANDLE, "|cmd args");

</XMP>
<p><EM>open2()</EM> returns the process ID of the child process.  It doesn't return on
failure: it just raises an exception matching <CODE>/^open2:/</CODE>.
<p><p><hr>

<H1> 
<A NAME="IPC::Open2_warning_0">
WARNING </A>
</H1>
It will not create these file handles for you.  You have to do this yourself.
So don't pass it empty variables expecting them to get filled in for you.
<p>Additionally, this is very dangerous as you may block forever.
It assumes it's going to talk to something like <STRONG>bc</STRONG>, both writing to
it and reading from it.  This is presumably safe because you ``know''
that commands like <STRONG>bc</STRONG> will read a line at a time and output a line at
a time.  Programs like 
<A HREF="perlfunc.htm#perlfunc_sort_2">sort</A>
 that read their entire input stream first,
however, are quite apt to cause deadlock.  
<p>The big problem with this approach is that if you don't have control 
over source code being run in the the child process, you can't control what it does 
with pipe buffering.  Thus you can't just open a pipe to <CODE>cat -v</CODE> and continually
read and write a line from it.
<p><p><hr>

<H1> 
<A NAME="IPC::Open2_see_0">
SEE ALSO</A>
</H1>
See <EM>open3</EM> for an alternative that handles STDERR as well.
<p>
</BODY>
</HTML>
