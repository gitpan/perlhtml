<HEAD><CENTER><TITLE>File_CheckTree</TITLE>
</CENTER></HEAD>
<BODY><p><hr>

<H1> 
<A NAME="File::CheckTree_name_0">
NAME</A>
</H1>
validate - run many filetest checks on a tree
<p><p><hr>

<H1> 
<A NAME="File::CheckTree_synopsis_0">
SYNOPSIS</A>
</H1>

<XMP>
    use File::CheckTree;
    $warnings += validate( q{
        /vmunix                 -e || die
        /boot                   -e || die
        /bin                    cd
            csh                 -ex
            csh                 !-ug
            sh                  -ex
            sh                  !-ug
        /usr                    -d || warn "What happened to $file?\n"
    });

</XMP>
<p><p><hr>

<H1> 
<A NAME="File::CheckTree_description_0">
DESCRIPTION</A>
</H1>
The <EM>validate()</EM> routine takes a single multiline string consisting of
lines containing a filename plus a file test to try on it.  (The
file test may also be a ``cd'', causing subsequent relative filenames
to be interpreted relative to that directory.)  After the file test
you may put <CODE>|| die</CODE> to make it a fatal error if the file test fails.
The default is <CODE>|| warn</CODE>.  The file test may optionally have a "!' prepended
to test for the opposite condition.  If you do a cd and then list some
relative filenames, you may want to indent them slightly for readability.
If you supply your own 
<A HREF="perlfunc.htm#perlfunc_die_0">die()</A>
 or 
<A HREF="perlfunc.htm#perlfunc_warn_0">warn()</A>
 message, you can use <STRONG>$file</STRONG> to
interpolate the filename.
<p>Filetests may be bunched:  ``-rwx'' tests for all of <CODE>-r</CODE>, 
<A HREF="perlrun.htm#perlrun_w_0">-w</A>
, and 
<A HREF="perlrun.htm#perlrun_x_0">-x</A>
.
Only the first failed test of the bunch will produce a warning.
<p>The routine returns the number of warnings issued.
<p>
</BODY>
</HTML>
