<HEAD><CENTER><TITLE>FileHandle</TITLE>
</CENTER></HEAD>
<BODY><p><hr>

<H1> 
<A NAME="FileHandle_name_0">
NAME</A>
</H1>
FileHandle - supply object methods for filehandles
<p><p><hr>

<H1> 
<A NAME="FileHandle_synopsis_0">
SYNOPSIS</A>
</H1>

<XMP>
    use FileHandle;
    $fh = new FileHandle;
    if ($fh->open "< file") {
        print <$fh>;
        $fh->close;
    }
    $fh = new FileHandle "> FOO";
    if (defined $fh) {
        print $fh "bar\n";
        $fh->close;
    }
    $fh = new FileHandle "file", "r";
    if (defined $fh) {
        print <$fh>;
        undef $fh;       # automatically closes the file
    }
    $fh = new FileHandle "file", O_WRONLY|O_APPEND;
    if (defined $fh) {
        print $fh "corge\n";
        undef $fh;       # automatically closes the file
    }
    $pos = $fh->getpos;
    $fh->setpos $pos;
    $fh->setvbuf($buffer_var, _IOLBF, 1024);
    ($readfh, $writefh) = FileHandle::pipe;
    autoflush STDOUT 1;

</XMP>
<p><p><hr>

<H1> 
<A NAME="FileHandle_description_0">
DESCRIPTION</A>
</H1>
<CODE>FileHandle::new</CODE> creates a <CODE>FileHandle</CODE>, which is a reference to a
newly created symbol (see the <CODE>Symbol</CODE> package).  If it receives any
parameters, they are passed to <CODE>FileHandle::open</CODE>; if the open fails,
the <CODE>FileHandle</CODE> object is destroyed.  Otherwise, it is returned to
the caller.
<p><CODE>FileHandle::new_from_fd</CODE> creates a <CODE>FileHandle</CODE> like <CODE>new</CODE> does.
It requires two parameters, which are passed to <CODE>FileHandle::fdopen</CODE>;
if the fdopen fails, the <CODE>FileHandle</CODE> object is destroyed.
Otherwise, it is returned to the caller.
<p><CODE>FileHandle::open</CODE> accepts one parameter or two.  With one parameter,
it is just a front end for the built-in 
<A HREF="perlfunc.htm#perlfunc_open_1">open</A>
 function.  With two
parameters, the first parameter is a filename that may include
whitespace or other special characters, and the second parameter is
the open mode in either Perl form (``&gt;'', ``+&lt;'', etc.) or POSIX form
(``w'', ``r+'', etc.).
<p><CODE>FileHandle::fdopen</CODE> is like 
<A HREF="perlfunc.htm#perlfunc_open_1">open</A>
 except that its first parameter
is not a filename but rather a file handle name, a FileHandle object,
or a file descriptor number.
<p>If the C functions <EM>fgetpos()</EM> and <EM>fsetpos()</EM> are available, then
<CODE>FileHandle::getpos</CODE> returns an opaque value that represents the
current position of the FileHandle, and <CODE>FileHandle::setpos</CODE> uses
that value to return to a previously visited position.
<p>If the C function <EM>setvbuf()</EM> is available, then <CODE>FileHandle::setvbuf</CODE>
sets the buffering policy for the FileHandle.  The calling sequence
for the Perl function is the same as its C counterpart, including the
macros <CODE>_IOFBF</CODE>, <CODE>_IOLBF</CODE>, and <CODE>_IONBF</CODE>, except that the buffer
parameter specifies a scalar variable to use as a buffer.  WARNING: A
variable used as a buffer by <CODE>FileHandle::setvbuf</CODE> must not be
modified in any way until the FileHandle is closed or until
<CODE>FileHandle::setvbuf</CODE> is called again, or memory corruption may
result!
<p>See 
<A HREF="perlfunc.htm">
the <EM>perlfunc</EM> manpage</A>
 for complete descriptions of each of the following
supported <CODE>FileHandle</CODE> methods, which are just front ends for the
corresponding built-in functions:
  
    close
    fileno
    getc
    gets
    eof
    clearerr
    seek
    tell
<p>See 
<A HREF="perlvar.htm">
the <EM>perlvar</EM> manpage</A>
 for complete descriptions of each of the following
supported <CODE>FileHandle</CODE> methods:
<p>
<XMP>
    autoflush
    output_field_separator
    output_record_separator
    input_record_separator
    input_line_number
    format_page_number
    format_lines_per_page
    format_lines_left
    format_name
    format_top_name
    format_line_break_characters
    format_formfeed

</XMP>
<p>Furthermore, for doing normal I/O you might need these:
<p>
<DL>
<DT>
<STRONG>$fh</STRONG>-&gt;print<DD>
See 
<A HREF="perlfunc.htm#perlfunc_print_1"><EM>print</EM></A>
.
<p>
<DT>
<STRONG>$fh</STRONG>-&gt;printf<DD>
See 
<A HREF="perlfunc.htm#perlfunc_printf_1"><EM>printf</EM></A>
.
<p>
<DT>
<STRONG>$fh</STRONG>-&gt;getline<DD>
This works like &lt;<STRONG>$fh</STRONG>&gt; described in <EM>``I/O Operators''</EM>
except that it's more readable and can be safely called in an
array context but still returns just one line.
<p>
<DT>
<STRONG>$fh</STRONG>-&gt;getlines<DD>
This works like &lt;<STRONG>$fh</STRONG>&gt; when called in an array context to
read all the remaining lines in a file, except that it's more readable.
It will also <EM>croak()</EM> if accidentally called in a scalar context.
<p>
</DL>
<p><hr>

<H1> 
<A NAME="FileHandle_see_0">
SEE ALSO</A>
</H1>

<A HREF="perlfunc.htm">
the <EM>perlfunc</EM> manpage</A>
, 
<EM>``I/O Operators''</EM>,
<EM>POSIX/``FileHandle''</EM>
<p><p><hr>

<H1> 
<A NAME="FileHandle_bugs_0">
BUGS</A>
</H1>
Due to backwards compatibility, all filehandles resemble objects
of class <CODE>FileHandle</CODE>, or actually classes derived from that class.
They actually aren't.  Which means you can't derive your own 
class from <CODE>FileHandle</CODE> and inherit those methods.
<p>
</BODY>
</HTML>
